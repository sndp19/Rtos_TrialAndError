
001_Rtos_TrialError.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f9c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800213c  0800213c  0000313c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002154  08002154  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002154  08002154  00003154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800215c  0800215c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800215c  0800215c  0000315c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002160  08002160  00003160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002164  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08002170  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002170  00004100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3c3  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d06  00000000  00000000  0000f3ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00011108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000923  00000000  00000000  00011cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015730  00000000  00000000  000125fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce68  00000000  00000000  00027d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092679  00000000  00000000  00034b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c720c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d0  00000000  00000000  000c7250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000ca320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002124 	.word	0x08002124

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	08002124 	.word	0x08002124

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fa0c 	bl	80008f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f804 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f86c 	bl	80005b8 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <main+0x10>

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b094      	sub	sp, #80	@ 0x50
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0320 	add.w	r3, r7, #32
 80004ee:	2230      	movs	r2, #48	@ 0x30
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 fdea 	bl	80020cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000508:	2300      	movs	r3, #0
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	4b28      	ldr	r3, [pc, #160]	@ (80005b0 <SystemClock_Config+0xcc>)
 800050e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000510:	4a27      	ldr	r2, [pc, #156]	@ (80005b0 <SystemClock_Config+0xcc>)
 8000512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000516:	6413      	str	r3, [r2, #64]	@ 0x40
 8000518:	4b25      	ldr	r3, [pc, #148]	@ (80005b0 <SystemClock_Config+0xcc>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800051c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	4b22      	ldr	r3, [pc, #136]	@ (80005b4 <SystemClock_Config+0xd0>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a21      	ldr	r2, [pc, #132]	@ (80005b4 <SystemClock_Config+0xd0>)
 800052e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000532:	6013      	str	r3, [r2, #0]
 8000534:	4b1f      	ldr	r3, [pc, #124]	@ (80005b4 <SystemClock_Config+0xd0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000540:	2302      	movs	r3, #2
 8000542:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000544:	2301      	movs	r3, #1
 8000546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000548:	2310      	movs	r3, #16
 800054a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054c:	2302      	movs	r3, #2
 800054e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000550:	2300      	movs	r3, #0
 8000552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000554:	2310      	movs	r3, #16
 8000556:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000558:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800055c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800055e:	2304      	movs	r3, #4
 8000560:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000562:	2304      	movs	r3, #4
 8000564:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	4618      	mov	r0, r3
 800056c:	f000 fc82 	bl	8000e74 <HAL_RCC_OscConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000576:	f000 f8af 	bl	80006d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057a:	230f      	movs	r3, #15
 800057c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057e:	2302      	movs	r3, #2
 8000580:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000586:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800058a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2102      	movs	r1, #2
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fee4 	bl	8001364 <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005a2:	f000 f899 	bl	80006d8 <Error_Handler>
  }
}
 80005a6:	bf00      	nop
 80005a8:	3750      	adds	r7, #80	@ 0x50
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023800 	.word	0x40023800
 80005b4:	40007000 	.word	0x40007000

080005b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	@ 0x28
 80005bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	4b35      	ldr	r3, [pc, #212]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	4a34      	ldr	r2, [pc, #208]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 80005d8:	f043 0304 	orr.w	r3, r3, #4
 80005dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005de:	4b32      	ldr	r3, [pc, #200]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	f003 0304 	and.w	r3, r3, #4
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	4b2e      	ldr	r3, [pc, #184]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a2d      	ldr	r2, [pc, #180]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 80005f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fa:	4b2b      	ldr	r3, [pc, #172]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	4b27      	ldr	r3, [pc, #156]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a26      	ldr	r2, [pc, #152]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
 8000616:	4b24      	ldr	r3, [pc, #144]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b20      	ldr	r3, [pc, #128]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a1f      	ldr	r2, [pc, #124]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 800062c:	f043 0302 	orr.w	r3, r3, #2
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <MX_GPIO_Init+0xf0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2120      	movs	r1, #32
 8000642:	481a      	ldr	r0, [pc, #104]	@ (80006ac <MX_GPIO_Init+0xf4>)
 8000644:	f000 fbfc 	bl	8000e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000648:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800064c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800064e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	4814      	ldr	r0, [pc, #80]	@ (80006b0 <MX_GPIO_Init+0xf8>)
 8000660:	f000 fa6a 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000664:	230c      	movs	r3, #12
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000668:	2302      	movs	r3, #2
 800066a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000670:	2303      	movs	r3, #3
 8000672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000674:	2307      	movs	r3, #7
 8000676:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	480b      	ldr	r0, [pc, #44]	@ (80006ac <MX_GPIO_Init+0xf4>)
 8000680:	f000 fa5a 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000684:	2320      	movs	r3, #32
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	4804      	ldr	r0, [pc, #16]	@ (80006ac <MX_GPIO_Init+0xf4>)
 800069c:	f000 fa4c 	bl	8000b38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a0:	bf00      	nop
 80006a2:	3728      	adds	r7, #40	@ 0x28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40020000 	.word	0x40020000
 80006b0:	40020800 	.word	0x40020800

080006b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a04      	ldr	r2, [pc, #16]	@ (80006d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d101      	bne.n	80006ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006c6:	f000 f935 	bl	8000934 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40000c00 	.word	0x40000c00

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <Error_Handler+0x8>

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <HAL_MspInit+0x4c>)
 80006f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000730 <HAL_MspInit+0x4c>)
 80006f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80006fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <HAL_MspInit+0x4c>)
 80006fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <HAL_MspInit+0x4c>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070e:	4a08      	ldr	r2, [pc, #32]	@ (8000730 <HAL_MspInit+0x4c>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000714:	6413      	str	r3, [r2, #64]	@ 0x40
 8000716:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <HAL_MspInit+0x4c>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800

08000734 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08e      	sub	sp, #56	@ 0x38
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800073c:	2300      	movs	r3, #0
 800073e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000740:	2300      	movs	r3, #0
 8000742:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	4b33      	ldr	r3, [pc, #204]	@ (8000818 <HAL_InitTick+0xe4>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	4a32      	ldr	r2, [pc, #200]	@ (8000818 <HAL_InitTick+0xe4>)
 800074e:	f043 0308 	orr.w	r3, r3, #8
 8000752:	6413      	str	r3, [r2, #64]	@ 0x40
 8000754:	4b30      	ldr	r3, [pc, #192]	@ (8000818 <HAL_InitTick+0xe4>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	f003 0308 	and.w	r3, r3, #8
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000760:	f107 0210 	add.w	r2, r7, #16
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4611      	mov	r1, r2
 800076a:	4618      	mov	r0, r3
 800076c:	f001 f806 	bl	800177c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000770:	6a3b      	ldr	r3, [r7, #32]
 8000772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000776:	2b00      	cmp	r3, #0
 8000778:	d103      	bne.n	8000782 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800077a:	f000 ffeb 	bl	8001754 <HAL_RCC_GetPCLK1Freq>
 800077e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000780:	e004      	b.n	800078c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000782:	f000 ffe7 	bl	8001754 <HAL_RCC_GetPCLK1Freq>
 8000786:	4603      	mov	r3, r0
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800078c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800078e:	4a23      	ldr	r2, [pc, #140]	@ (800081c <HAL_InitTick+0xe8>)
 8000790:	fba2 2303 	umull	r2, r3, r2, r3
 8000794:	0c9b      	lsrs	r3, r3, #18
 8000796:	3b01      	subs	r3, #1
 8000798:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800079a:	4b21      	ldr	r3, [pc, #132]	@ (8000820 <HAL_InitTick+0xec>)
 800079c:	4a21      	ldr	r2, [pc, #132]	@ (8000824 <HAL_InitTick+0xf0>)
 800079e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80007a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000820 <HAL_InitTick+0xec>)
 80007a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007a6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80007a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000820 <HAL_InitTick+0xec>)
 80007aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007ac:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <HAL_InitTick+0xec>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <HAL_InitTick+0xec>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ba:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <HAL_InitTick+0xec>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80007c0:	4817      	ldr	r0, [pc, #92]	@ (8000820 <HAL_InitTick+0xec>)
 80007c2:	f001 f80d 	bl	80017e0 <HAL_TIM_Base_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80007cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d11b      	bne.n	800080c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80007d4:	4812      	ldr	r0, [pc, #72]	@ (8000820 <HAL_InitTick+0xec>)
 80007d6:	f001 f85d 	bl	8001894 <HAL_TIM_Base_Start_IT>
 80007da:	4603      	mov	r3, r0
 80007dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80007e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d111      	bne.n	800080c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80007e8:	2032      	movs	r0, #50	@ 0x32
 80007ea:	f000 f997 	bl	8000b1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b0f      	cmp	r3, #15
 80007f2:	d808      	bhi.n	8000806 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80007f4:	2200      	movs	r2, #0
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	2032      	movs	r0, #50	@ 0x32
 80007fa:	f000 f973 	bl	8000ae4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000828 <HAL_InitTick+0xf4>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	e002      	b.n	800080c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000806:	2301      	movs	r3, #1
 8000808:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800080c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000810:	4618      	mov	r0, r3
 8000812:	3738      	adds	r7, #56	@ 0x38
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	431bde83 	.word	0x431bde83
 8000820:	20000028 	.word	0x20000028
 8000824:	40000c00 	.word	0x40000c00
 8000828:	20000004 	.word	0x20000004

0800082c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <NMI_Handler+0x4>

08000834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <MemManage_Handler+0x4>

08000844 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <BusFault_Handler+0x4>

0800084c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <UsageFault_Handler+0x4>

08000854 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
	...

08000864 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000868:	4802      	ldr	r0, [pc, #8]	@ (8000874 <TIM5_IRQHandler+0x10>)
 800086a:	f001 f875 	bl	8001958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000028 	.word	0x20000028

08000878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <SystemInit+0x20>)
 800087e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000882:	4a05      	ldr	r2, [pc, #20]	@ (8000898 <SystemInit+0x20>)
 8000884:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000888:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800089c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008a0:	f7ff ffea 	bl	8000878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008a4:	480c      	ldr	r0, [pc, #48]	@ (80008d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008a6:	490d      	ldr	r1, [pc, #52]	@ (80008dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008a8:	4a0d      	ldr	r2, [pc, #52]	@ (80008e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ba:	4a0a      	ldr	r2, [pc, #40]	@ (80008e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008bc:	4c0a      	ldr	r4, [pc, #40]	@ (80008e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ca:	f001 fc07 	bl	80020dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ce:	f7ff fdff 	bl	80004d0 <main>
  bx  lr    
 80008d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008e0:	08002164 	.word	0x08002164
  ldr r2, =_sbss
 80008e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008e8:	20000100 	.word	0x20000100

080008ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC_IRQHandler>
	...

080008f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <HAL_Init+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000930 <HAL_Init+0x40>)
 80008fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000900:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <HAL_Init+0x40>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0a      	ldr	r2, [pc, #40]	@ (8000930 <HAL_Init+0x40>)
 8000906:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800090a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090c:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <HAL_Init+0x40>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a07      	ldr	r2, [pc, #28]	@ (8000930 <HAL_Init+0x40>)
 8000912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000918:	2003      	movs	r0, #3
 800091a:	f000 f8d8 	bl	8000ace <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ff08 	bl	8000734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000924:	f7ff fede 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023c00 	.word	0x40023c00

08000934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <HAL_IncTick+0x20>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <HAL_IncTick+0x24>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a04      	ldr	r2, [pc, #16]	@ (8000958 <HAL_IncTick+0x24>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000008 	.word	0x20000008
 8000958:	20000070 	.word	0x20000070

0800095c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;
 8000960:	4b03      	ldr	r3, [pc, #12]	@ (8000970 <HAL_GetTick+0x14>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000070 	.word	0x20000070

08000974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000984:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000990:	4013      	ands	r3, r2
 8000992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800099c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a6:	4a04      	ldr	r2, [pc, #16]	@ (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	60d3      	str	r3, [r2, #12]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c0:	4b04      	ldr	r3, [pc, #16]	@ (80009d4 <__NVIC_GetPriorityGrouping+0x18>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	f003 0307 	and.w	r3, r3, #7
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	db0b      	blt.n	8000a02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f003 021f 	and.w	r2, r3, #31
 80009f0:	4907      	ldr	r1, [pc, #28]	@ (8000a10 <__NVIC_EnableIRQ+0x38>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	095b      	lsrs	r3, r3, #5
 80009f8:	2001      	movs	r0, #1
 80009fa:	fa00 f202 	lsl.w	r2, r0, r2
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000e100 	.word	0xe000e100

08000a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	db0a      	blt.n	8000a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	490c      	ldr	r1, [pc, #48]	@ (8000a60 <__NVIC_SetPriority+0x4c>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	440b      	add	r3, r1
 8000a38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a3c:	e00a      	b.n	8000a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4908      	ldr	r1, [pc, #32]	@ (8000a64 <__NVIC_SetPriority+0x50>)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	0112      	lsls	r2, r2, #4
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	440b      	add	r3, r1
 8000a52:	761a      	strb	r2, [r3, #24]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000e100 	.word	0xe000e100
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b089      	sub	sp, #36	@ 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f1c3 0307 	rsb	r3, r3, #7
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	bf28      	it	cs
 8000a86:	2304      	movcs	r3, #4
 8000a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d902      	bls.n	8000a98 <NVIC_EncodePriority+0x30>
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3b03      	subs	r3, #3
 8000a96:	e000      	b.n	8000a9a <NVIC_EncodePriority+0x32>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	401a      	ands	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	43d9      	mvns	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	4313      	orrs	r3, r2
         );
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	@ 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ff4c 	bl	8000974 <__NVIC_SetPriorityGrouping>
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
 8000af0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af6:	f7ff ff61 	bl	80009bc <__NVIC_GetPriorityGrouping>
 8000afa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	68b9      	ldr	r1, [r7, #8]
 8000b00:	6978      	ldr	r0, [r7, #20]
 8000b02:	f7ff ffb1 	bl	8000a68 <NVIC_EncodePriority>
 8000b06:	4602      	mov	r2, r0
 8000b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff80 	bl	8000a14 <__NVIC_SetPriority>
}
 8000b14:	bf00      	nop
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff ff54 	bl	80009d8 <__NVIC_EnableIRQ>
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	@ 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
 8000b52:	e159      	b.n	8000e08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b54:	2201      	movs	r2, #1
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	697a      	ldr	r2, [r7, #20]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	f040 8148 	bne.w	8000e02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 0303 	and.w	r3, r3, #3
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d005      	beq.n	8000b8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d130      	bne.n	8000bec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	2203      	movs	r2, #3
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	68da      	ldr	r2, [r3, #12]
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	69ba      	ldr	r2, [r7, #24]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	69ba      	ldr	r2, [r7, #24]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	091b      	lsrs	r3, r3, #4
 8000bd6:	f003 0201 	and.w	r2, r3, #1
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 0303 	and.w	r3, r3, #3
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d017      	beq.n	8000c28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	2203      	movs	r2, #3
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 0303 	and.w	r3, r3, #3
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d123      	bne.n	8000c7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	08da      	lsrs	r2, r3, #3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3208      	adds	r2, #8
 8000c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	f003 0307 	and.w	r3, r3, #7
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	220f      	movs	r2, #15
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4013      	ands	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	691a      	ldr	r2, [r3, #16]
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	08da      	lsrs	r2, r3, #3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3208      	adds	r2, #8
 8000c76:	69b9      	ldr	r1, [r7, #24]
 8000c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	2203      	movs	r2, #3
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4013      	ands	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0203 	and.w	r2, r3, #3
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f000 80a2 	beq.w	8000e02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b57      	ldr	r3, [pc, #348]	@ (8000e20 <HAL_GPIO_Init+0x2e8>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc6:	4a56      	ldr	r2, [pc, #344]	@ (8000e20 <HAL_GPIO_Init+0x2e8>)
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cce:	4b54      	ldr	r3, [pc, #336]	@ (8000e20 <HAL_GPIO_Init+0x2e8>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cda:	4a52      	ldr	r2, [pc, #328]	@ (8000e24 <HAL_GPIO_Init+0x2ec>)
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	089b      	lsrs	r3, r3, #2
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f003 0303 	and.w	r3, r3, #3
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	220f      	movs	r2, #15
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a49      	ldr	r2, [pc, #292]	@ (8000e28 <HAL_GPIO_Init+0x2f0>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d019      	beq.n	8000d3a <HAL_GPIO_Init+0x202>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a48      	ldr	r2, [pc, #288]	@ (8000e2c <HAL_GPIO_Init+0x2f4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d013      	beq.n	8000d36 <HAL_GPIO_Init+0x1fe>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a47      	ldr	r2, [pc, #284]	@ (8000e30 <HAL_GPIO_Init+0x2f8>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d00d      	beq.n	8000d32 <HAL_GPIO_Init+0x1fa>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a46      	ldr	r2, [pc, #280]	@ (8000e34 <HAL_GPIO_Init+0x2fc>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d007      	beq.n	8000d2e <HAL_GPIO_Init+0x1f6>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a45      	ldr	r2, [pc, #276]	@ (8000e38 <HAL_GPIO_Init+0x300>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d101      	bne.n	8000d2a <HAL_GPIO_Init+0x1f2>
 8000d26:	2304      	movs	r3, #4
 8000d28:	e008      	b.n	8000d3c <HAL_GPIO_Init+0x204>
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	e006      	b.n	8000d3c <HAL_GPIO_Init+0x204>
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e004      	b.n	8000d3c <HAL_GPIO_Init+0x204>
 8000d32:	2302      	movs	r3, #2
 8000d34:	e002      	b.n	8000d3c <HAL_GPIO_Init+0x204>
 8000d36:	2301      	movs	r3, #1
 8000d38:	e000      	b.n	8000d3c <HAL_GPIO_Init+0x204>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	69fa      	ldr	r2, [r7, #28]
 8000d3e:	f002 0203 	and.w	r2, r2, #3
 8000d42:	0092      	lsls	r2, r2, #2
 8000d44:	4093      	lsls	r3, r2
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d4c:	4935      	ldr	r1, [pc, #212]	@ (8000e24 <HAL_GPIO_Init+0x2ec>)
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	3302      	adds	r3, #2
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d5a:	4b38      	ldr	r3, [pc, #224]	@ (8000e3c <HAL_GPIO_Init+0x304>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d7e:	4a2f      	ldr	r2, [pc, #188]	@ (8000e3c <HAL_GPIO_Init+0x304>)
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d84:	4b2d      	ldr	r3, [pc, #180]	@ (8000e3c <HAL_GPIO_Init+0x304>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d003      	beq.n	8000da8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000da8:	4a24      	ldr	r2, [pc, #144]	@ (8000e3c <HAL_GPIO_Init+0x304>)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dae:	4b23      	ldr	r3, [pc, #140]	@ (8000e3c <HAL_GPIO_Init+0x304>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dd2:	4a1a      	ldr	r2, [pc, #104]	@ (8000e3c <HAL_GPIO_Init+0x304>)
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dd8:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <HAL_GPIO_Init+0x304>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dfc:	4a0f      	ldr	r2, [pc, #60]	@ (8000e3c <HAL_GPIO_Init+0x304>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3301      	adds	r3, #1
 8000e06:	61fb      	str	r3, [r7, #28]
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	2b0f      	cmp	r3, #15
 8000e0c:	f67f aea2 	bls.w	8000b54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3724      	adds	r7, #36	@ 0x24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40013800 	.word	0x40013800
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	40020400 	.word	0x40020400
 8000e30:	40020800 	.word	0x40020800
 8000e34:	40020c00 	.word	0x40020c00
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40013c00 	.word	0x40013c00

08000e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e50:	787b      	ldrb	r3, [r7, #1]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e56:	887a      	ldrh	r2, [r7, #2]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e5c:	e003      	b.n	8000e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e5e:	887b      	ldrh	r3, [r7, #2]
 8000e60:	041a      	lsls	r2, r3, #16
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	619a      	str	r2, [r3, #24]
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e267      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d075      	beq.n	8000f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e92:	4b88      	ldr	r3, [pc, #544]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 030c 	and.w	r3, r3, #12
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	d00c      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e9e:	4b85      	ldr	r3, [pc, #532]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ea6:	2b08      	cmp	r3, #8
 8000ea8:	d112      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eaa:	4b82      	ldr	r3, [pc, #520]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000eb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000eb6:	d10b      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb8:	4b7e      	ldr	r3, [pc, #504]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d05b      	beq.n	8000f7c <HAL_RCC_OscConfig+0x108>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d157      	bne.n	8000f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e242      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ed8:	d106      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x74>
 8000eda:	4b76      	ldr	r3, [pc, #472]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a75      	ldr	r2, [pc, #468]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e01d      	b.n	8000f24 <HAL_RCC_OscConfig+0xb0>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ef0:	d10c      	bne.n	8000f0c <HAL_RCC_OscConfig+0x98>
 8000ef2:	4b70      	ldr	r3, [pc, #448]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a6f      	ldr	r2, [pc, #444]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	4b6d      	ldr	r3, [pc, #436]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a6c      	ldr	r2, [pc, #432]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e00b      	b.n	8000f24 <HAL_RCC_OscConfig+0xb0>
 8000f0c:	4b69      	ldr	r3, [pc, #420]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a68      	ldr	r2, [pc, #416]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b66      	ldr	r3, [pc, #408]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a65      	ldr	r2, [pc, #404]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d013      	beq.n	8000f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fd16 	bl	800095c <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f34:	f7ff fd12 	bl	800095c <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b64      	cmp	r3, #100	@ 0x64
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e207      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f46:	4b5b      	ldr	r3, [pc, #364]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0f0      	beq.n	8000f34 <HAL_RCC_OscConfig+0xc0>
 8000f52:	e014      	b.n	8000f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f54:	f7ff fd02 	bl	800095c <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fcfe 	bl	800095c <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b64      	cmp	r3, #100	@ 0x64
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e1f3      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f6e:	4b51      	ldr	r3, [pc, #324]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f0      	bne.n	8000f5c <HAL_RCC_OscConfig+0xe8>
 8000f7a:	e000      	b.n	8000f7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d063      	beq.n	8001052 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f8a:	4b4a      	ldr	r3, [pc, #296]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 030c 	and.w	r3, r3, #12
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00b      	beq.n	8000fae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f96:	4b47      	ldr	r3, [pc, #284]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d11c      	bne.n	8000fdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fa2:	4b44      	ldr	r3, [pc, #272]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d116      	bne.n	8000fdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fae:	4b41      	ldr	r3, [pc, #260]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d005      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x152>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d001      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e1c7      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	4937      	ldr	r1, [pc, #220]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fda:	e03a      	b.n	8001052 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d020      	beq.n	8001026 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe4:	4b34      	ldr	r3, [pc, #208]	@ (80010b8 <HAL_RCC_OscConfig+0x244>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fea:	f7ff fcb7 	bl	800095c <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ff2:	f7ff fcb3 	bl	800095c <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e1a8      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001004:	4b2b      	ldr	r3, [pc, #172]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001010:	4b28      	ldr	r3, [pc, #160]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	4925      	ldr	r1, [pc, #148]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8001020:	4313      	orrs	r3, r2
 8001022:	600b      	str	r3, [r1, #0]
 8001024:	e015      	b.n	8001052 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001026:	4b24      	ldr	r3, [pc, #144]	@ (80010b8 <HAL_RCC_OscConfig+0x244>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102c:	f7ff fc96 	bl	800095c <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001034:	f7ff fc92 	bl	800095c <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e187      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001046:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f0      	bne.n	8001034 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d036      	beq.n	80010cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d016      	beq.n	8001094 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001066:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <HAL_RCC_OscConfig+0x248>)
 8001068:	2201      	movs	r2, #1
 800106a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800106c:	f7ff fc76 	bl	800095c <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001074:	f7ff fc72 	bl	800095c <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e167      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001086:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <HAL_RCC_OscConfig+0x240>)
 8001088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f0      	beq.n	8001074 <HAL_RCC_OscConfig+0x200>
 8001092:	e01b      	b.n	80010cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001094:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <HAL_RCC_OscConfig+0x248>)
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109a:	f7ff fc5f 	bl	800095c <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a0:	e00e      	b.n	80010c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010a2:	f7ff fc5b 	bl	800095c <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d907      	bls.n	80010c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e150      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
 80010b4:	40023800 	.word	0x40023800
 80010b8:	42470000 	.word	0x42470000
 80010bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c0:	4b88      	ldr	r3, [pc, #544]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 80010c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1ea      	bne.n	80010a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 8097 	beq.w	8001208 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010de:	4b81      	ldr	r3, [pc, #516]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10f      	bne.n	800110a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	4b7d      	ldr	r3, [pc, #500]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	4a7c      	ldr	r2, [pc, #496]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010fa:	4b7a      	ldr	r3, [pc, #488]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001106:	2301      	movs	r3, #1
 8001108:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110a:	4b77      	ldr	r3, [pc, #476]	@ (80012e8 <HAL_RCC_OscConfig+0x474>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001112:	2b00      	cmp	r3, #0
 8001114:	d118      	bne.n	8001148 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001116:	4b74      	ldr	r3, [pc, #464]	@ (80012e8 <HAL_RCC_OscConfig+0x474>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a73      	ldr	r2, [pc, #460]	@ (80012e8 <HAL_RCC_OscConfig+0x474>)
 800111c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001122:	f7ff fc1b 	bl	800095c <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800112a:	f7ff fc17 	bl	800095c <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e10c      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113c:	4b6a      	ldr	r3, [pc, #424]	@ (80012e8 <HAL_RCC_OscConfig+0x474>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d106      	bne.n	800115e <HAL_RCC_OscConfig+0x2ea>
 8001150:	4b64      	ldr	r3, [pc, #400]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001154:	4a63      	ldr	r2, [pc, #396]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6713      	str	r3, [r2, #112]	@ 0x70
 800115c:	e01c      	b.n	8001198 <HAL_RCC_OscConfig+0x324>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2b05      	cmp	r3, #5
 8001164:	d10c      	bne.n	8001180 <HAL_RCC_OscConfig+0x30c>
 8001166:	4b5f      	ldr	r3, [pc, #380]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800116a:	4a5e      	ldr	r2, [pc, #376]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	6713      	str	r3, [r2, #112]	@ 0x70
 8001172:	4b5c      	ldr	r3, [pc, #368]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001176:	4a5b      	ldr	r2, [pc, #364]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6713      	str	r3, [r2, #112]	@ 0x70
 800117e:	e00b      	b.n	8001198 <HAL_RCC_OscConfig+0x324>
 8001180:	4b58      	ldr	r3, [pc, #352]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001184:	4a57      	ldr	r2, [pc, #348]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001186:	f023 0301 	bic.w	r3, r3, #1
 800118a:	6713      	str	r3, [r2, #112]	@ 0x70
 800118c:	4b55      	ldr	r3, [pc, #340]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 800118e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001190:	4a54      	ldr	r2, [pc, #336]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001192:	f023 0304 	bic.w	r3, r3, #4
 8001196:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d015      	beq.n	80011cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a0:	f7ff fbdc 	bl	800095c <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a6:	e00a      	b.n	80011be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011a8:	f7ff fbd8 	bl	800095c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e0cb      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011be:	4b49      	ldr	r3, [pc, #292]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 80011c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0ee      	beq.n	80011a8 <HAL_RCC_OscConfig+0x334>
 80011ca:	e014      	b.n	80011f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011cc:	f7ff fbc6 	bl	800095c <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d2:	e00a      	b.n	80011ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011d4:	f7ff fbc2 	bl	800095c <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e0b5      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ea:	4b3e      	ldr	r3, [pc, #248]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 80011ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1ee      	bne.n	80011d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011f6:	7dfb      	ldrb	r3, [r7, #23]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d105      	bne.n	8001208 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011fc:	4b39      	ldr	r3, [pc, #228]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001200:	4a38      	ldr	r2, [pc, #224]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001202:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001206:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 80a1 	beq.w	8001354 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001212:	4b34      	ldr	r3, [pc, #208]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b08      	cmp	r3, #8
 800121c:	d05c      	beq.n	80012d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d141      	bne.n	80012aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001226:	4b31      	ldr	r3, [pc, #196]	@ (80012ec <HAL_RCC_OscConfig+0x478>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fb96 	bl	800095c <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001234:	f7ff fb92 	bl	800095c <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e087      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001246:	4b27      	ldr	r3, [pc, #156]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69da      	ldr	r2, [r3, #28]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001260:	019b      	lsls	r3, r3, #6
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001268:	085b      	lsrs	r3, r3, #1
 800126a:	3b01      	subs	r3, #1
 800126c:	041b      	lsls	r3, r3, #16
 800126e:	431a      	orrs	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001274:	061b      	lsls	r3, r3, #24
 8001276:	491b      	ldr	r1, [pc, #108]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800127c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ec <HAL_RCC_OscConfig+0x478>)
 800127e:	2201      	movs	r2, #1
 8001280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001282:	f7ff fb6b 	bl	800095c <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800128a:	f7ff fb67 	bl	800095c <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e05c      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0f0      	beq.n	800128a <HAL_RCC_OscConfig+0x416>
 80012a8:	e054      	b.n	8001354 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012aa:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <HAL_RCC_OscConfig+0x478>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff fb54 	bl	800095c <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b8:	f7ff fb50 	bl	800095c <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e045      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_RCC_OscConfig+0x470>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0x444>
 80012d6:	e03d      	b.n	8001354 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d107      	bne.n	80012f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e038      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40007000 	.word	0x40007000
 80012ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001360 <HAL_RCC_OscConfig+0x4ec>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d028      	beq.n	8001350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001308:	429a      	cmp	r2, r3
 800130a:	d121      	bne.n	8001350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001316:	429a      	cmp	r2, r3
 8001318:	d11a      	bne.n	8001350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001320:	4013      	ands	r3, r2
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001326:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001328:	4293      	cmp	r3, r2
 800132a:	d111      	bne.n	8001350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001336:	085b      	lsrs	r3, r3, #1
 8001338:	3b01      	subs	r3, #1
 800133a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800133c:	429a      	cmp	r2, r3
 800133e:	d107      	bne.n	8001350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800134a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800134c:	429a      	cmp	r2, r3
 800134e:	d001      	beq.n	8001354 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800

08001364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e0cc      	b.n	8001512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001378:	4b68      	ldr	r3, [pc, #416]	@ (800151c <HAL_RCC_ClockConfig+0x1b8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	d90c      	bls.n	80013a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001386:	4b65      	ldr	r3, [pc, #404]	@ (800151c <HAL_RCC_ClockConfig+0x1b8>)
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800138e:	4b63      	ldr	r3, [pc, #396]	@ (800151c <HAL_RCC_ClockConfig+0x1b8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d001      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0b8      	b.n	8001512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d020      	beq.n	80013ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013b8:	4b59      	ldr	r3, [pc, #356]	@ (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	4a58      	ldr	r2, [pc, #352]	@ (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013d0:	4b53      	ldr	r3, [pc, #332]	@ (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	4a52      	ldr	r2, [pc, #328]	@ (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013dc:	4b50      	ldr	r3, [pc, #320]	@ (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	494d      	ldr	r1, [pc, #308]	@ (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d044      	beq.n	8001484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d107      	bne.n	8001412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	4b47      	ldr	r3, [pc, #284]	@ (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d119      	bne.n	8001442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e07f      	b.n	8001512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d003      	beq.n	8001422 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800141e:	2b03      	cmp	r3, #3
 8001420:	d107      	bne.n	8001432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001422:	4b3f      	ldr	r3, [pc, #252]	@ (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d109      	bne.n	8001442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e06f      	b.n	8001512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001432:	4b3b      	ldr	r3, [pc, #236]	@ (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e067      	b.n	8001512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001442:	4b37      	ldr	r3, [pc, #220]	@ (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f023 0203 	bic.w	r2, r3, #3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4934      	ldr	r1, [pc, #208]	@ (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 8001450:	4313      	orrs	r3, r2
 8001452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001454:	f7ff fa82 	bl	800095c <HAL_GetTick>
 8001458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800145a:	e00a      	b.n	8001472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800145c:	f7ff fa7e 	bl	800095c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e04f      	b.n	8001512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001472:	4b2b      	ldr	r3, [pc, #172]	@ (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 020c 	and.w	r2, r3, #12
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	429a      	cmp	r2, r3
 8001482:	d1eb      	bne.n	800145c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001484:	4b25      	ldr	r3, [pc, #148]	@ (800151c <HAL_RCC_ClockConfig+0x1b8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d20c      	bcs.n	80014ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001492:	4b22      	ldr	r3, [pc, #136]	@ (800151c <HAL_RCC_ClockConfig+0x1b8>)
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800149a:	4b20      	ldr	r3, [pc, #128]	@ (800151c <HAL_RCC_ClockConfig+0x1b8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d001      	beq.n	80014ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e032      	b.n	8001512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d008      	beq.n	80014ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014b8:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	4916      	ldr	r1, [pc, #88]	@ (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d009      	beq.n	80014ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014d6:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	490e      	ldr	r1, [pc, #56]	@ (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014ea:	f000 f821 	bl	8001530 <HAL_RCC_GetSysClockFreq>
 80014ee:	4602      	mov	r2, r0
 80014f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	490a      	ldr	r1, [pc, #40]	@ (8001524 <HAL_RCC_ClockConfig+0x1c0>)
 80014fc:	5ccb      	ldrb	r3, [r1, r3]
 80014fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001502:	4a09      	ldr	r2, [pc, #36]	@ (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <HAL_RCC_ClockConfig+0x1c8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f912 	bl	8000734 <HAL_InitTick>

  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023c00 	.word	0x40023c00
 8001520:	40023800 	.word	0x40023800
 8001524:	0800213c 	.word	0x0800213c
 8001528:	20000000 	.word	0x20000000
 800152c:	20000004 	.word	0x20000004

08001530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001534:	b094      	sub	sp, #80	@ 0x50
 8001536:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	647b      	str	r3, [r7, #68]	@ 0x44
 800153c:	2300      	movs	r3, #0
 800153e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001540:	2300      	movs	r3, #0
 8001542:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001548:	4b79      	ldr	r3, [pc, #484]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x200>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b08      	cmp	r3, #8
 8001552:	d00d      	beq.n	8001570 <HAL_RCC_GetSysClockFreq+0x40>
 8001554:	2b08      	cmp	r3, #8
 8001556:	f200 80e1 	bhi.w	800171c <HAL_RCC_GetSysClockFreq+0x1ec>
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <HAL_RCC_GetSysClockFreq+0x34>
 800155e:	2b04      	cmp	r3, #4
 8001560:	d003      	beq.n	800156a <HAL_RCC_GetSysClockFreq+0x3a>
 8001562:	e0db      	b.n	800171c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001564:	4b73      	ldr	r3, [pc, #460]	@ (8001734 <HAL_RCC_GetSysClockFreq+0x204>)
 8001566:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001568:	e0db      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800156a:	4b73      	ldr	r3, [pc, #460]	@ (8001738 <HAL_RCC_GetSysClockFreq+0x208>)
 800156c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800156e:	e0d8      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001570:	4b6f      	ldr	r3, [pc, #444]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x200>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001578:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800157a:	4b6d      	ldr	r3, [pc, #436]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x200>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d063      	beq.n	800164e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001586:	4b6a      	ldr	r3, [pc, #424]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x200>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	099b      	lsrs	r3, r3, #6
 800158c:	2200      	movs	r2, #0
 800158e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001590:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001598:	633b      	str	r3, [r7, #48]	@ 0x30
 800159a:	2300      	movs	r3, #0
 800159c:	637b      	str	r3, [r7, #52]	@ 0x34
 800159e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80015a2:	4622      	mov	r2, r4
 80015a4:	462b      	mov	r3, r5
 80015a6:	f04f 0000 	mov.w	r0, #0
 80015aa:	f04f 0100 	mov.w	r1, #0
 80015ae:	0159      	lsls	r1, r3, #5
 80015b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015b4:	0150      	lsls	r0, r2, #5
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4621      	mov	r1, r4
 80015bc:	1a51      	subs	r1, r2, r1
 80015be:	6139      	str	r1, [r7, #16]
 80015c0:	4629      	mov	r1, r5
 80015c2:	eb63 0301 	sbc.w	r3, r3, r1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80015d4:	4659      	mov	r1, fp
 80015d6:	018b      	lsls	r3, r1, #6
 80015d8:	4651      	mov	r1, sl
 80015da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015de:	4651      	mov	r1, sl
 80015e0:	018a      	lsls	r2, r1, #6
 80015e2:	4651      	mov	r1, sl
 80015e4:	ebb2 0801 	subs.w	r8, r2, r1
 80015e8:	4659      	mov	r1, fp
 80015ea:	eb63 0901 	sbc.w	r9, r3, r1
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001602:	4690      	mov	r8, r2
 8001604:	4699      	mov	r9, r3
 8001606:	4623      	mov	r3, r4
 8001608:	eb18 0303 	adds.w	r3, r8, r3
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	462b      	mov	r3, r5
 8001610:	eb49 0303 	adc.w	r3, r9, r3
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001622:	4629      	mov	r1, r5
 8001624:	024b      	lsls	r3, r1, #9
 8001626:	4621      	mov	r1, r4
 8001628:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800162c:	4621      	mov	r1, r4
 800162e:	024a      	lsls	r2, r1, #9
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001636:	2200      	movs	r2, #0
 8001638:	62bb      	str	r3, [r7, #40]	@ 0x28
 800163a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800163c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001640:	f7fe fdce 	bl	80001e0 <__aeabi_uldivmod>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4613      	mov	r3, r2
 800164a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800164c:	e058      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800164e:	4b38      	ldr	r3, [pc, #224]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x200>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	099b      	lsrs	r3, r3, #6
 8001654:	2200      	movs	r2, #0
 8001656:	4618      	mov	r0, r3
 8001658:	4611      	mov	r1, r2
 800165a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800165e:	623b      	str	r3, [r7, #32]
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
 8001664:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001668:	4642      	mov	r2, r8
 800166a:	464b      	mov	r3, r9
 800166c:	f04f 0000 	mov.w	r0, #0
 8001670:	f04f 0100 	mov.w	r1, #0
 8001674:	0159      	lsls	r1, r3, #5
 8001676:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800167a:	0150      	lsls	r0, r2, #5
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4641      	mov	r1, r8
 8001682:	ebb2 0a01 	subs.w	sl, r2, r1
 8001686:	4649      	mov	r1, r9
 8001688:	eb63 0b01 	sbc.w	fp, r3, r1
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001698:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800169c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80016a0:	ebb2 040a 	subs.w	r4, r2, sl
 80016a4:	eb63 050b 	sbc.w	r5, r3, fp
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	00eb      	lsls	r3, r5, #3
 80016b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016b6:	00e2      	lsls	r2, r4, #3
 80016b8:	4614      	mov	r4, r2
 80016ba:	461d      	mov	r5, r3
 80016bc:	4643      	mov	r3, r8
 80016be:	18e3      	adds	r3, r4, r3
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	464b      	mov	r3, r9
 80016c4:	eb45 0303 	adc.w	r3, r5, r3
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016d6:	4629      	mov	r1, r5
 80016d8:	028b      	lsls	r3, r1, #10
 80016da:	4621      	mov	r1, r4
 80016dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016e0:	4621      	mov	r1, r4
 80016e2:	028a      	lsls	r2, r1, #10
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016ea:	2200      	movs	r2, #0
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	61fa      	str	r2, [r7, #28]
 80016f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016f4:	f7fe fd74 	bl	80001e0 <__aeabi_uldivmod>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4613      	mov	r3, r2
 80016fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001700:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x200>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	0c1b      	lsrs	r3, r3, #16
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	3301      	adds	r3, #1
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001710:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001714:	fbb2 f3f3 	udiv	r3, r2, r3
 8001718:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800171a:	e002      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800171c:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <HAL_RCC_GetSysClockFreq+0x204>)
 800171e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001722:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001724:	4618      	mov	r0, r3
 8001726:	3750      	adds	r7, #80	@ 0x50
 8001728:	46bd      	mov	sp, r7
 800172a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	00f42400 	.word	0x00f42400
 8001738:	007a1200 	.word	0x007a1200

0800173c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001740:	4b03      	ldr	r3, [pc, #12]	@ (8001750 <HAL_RCC_GetHCLKFreq+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000000 	.word	0x20000000

08001754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001758:	f7ff fff0 	bl	800173c <HAL_RCC_GetHCLKFreq>
 800175c:	4602      	mov	r2, r0
 800175e:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	0a9b      	lsrs	r3, r3, #10
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	4903      	ldr	r1, [pc, #12]	@ (8001778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800176a:	5ccb      	ldrb	r3, [r1, r3]
 800176c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001770:	4618      	mov	r0, r3
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40023800 	.word	0x40023800
 8001778:	0800214c 	.word	0x0800214c

0800177c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	220f      	movs	r2, #15
 800178a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <HAL_RCC_GetClockConfig+0x5c>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0203 	and.w	r2, r3, #3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001798:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <HAL_RCC_GetClockConfig+0x5c>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <HAL_RCC_GetClockConfig+0x5c>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017b0:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <HAL_RCC_GetClockConfig+0x5c>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	08db      	lsrs	r3, r3, #3
 80017b6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017be:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <HAL_RCC_GetClockConfig+0x60>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0207 	and.w	r2, r3, #7
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	601a      	str	r2, [r3, #0]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e041      	b.n	8001876 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d106      	bne.n	800180c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f839 	bl	800187e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2202      	movs	r2, #2
 8001810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3304      	adds	r3, #4
 800181c:	4619      	mov	r1, r3
 800181e:	4610      	mov	r0, r2
 8001820:	f000 f9b2 	bl	8001b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d001      	beq.n	80018ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e044      	b.n	8001936 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0201 	orr.w	r2, r2, #1
 80018c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001944 <HAL_TIM_Base_Start_IT+0xb0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d018      	beq.n	8001900 <HAL_TIM_Base_Start_IT+0x6c>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018d6:	d013      	beq.n	8001900 <HAL_TIM_Base_Start_IT+0x6c>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001948 <HAL_TIM_Base_Start_IT+0xb4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00e      	beq.n	8001900 <HAL_TIM_Base_Start_IT+0x6c>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a19      	ldr	r2, [pc, #100]	@ (800194c <HAL_TIM_Base_Start_IT+0xb8>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d009      	beq.n	8001900 <HAL_TIM_Base_Start_IT+0x6c>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a17      	ldr	r2, [pc, #92]	@ (8001950 <HAL_TIM_Base_Start_IT+0xbc>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d004      	beq.n	8001900 <HAL_TIM_Base_Start_IT+0x6c>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a16      	ldr	r2, [pc, #88]	@ (8001954 <HAL_TIM_Base_Start_IT+0xc0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d111      	bne.n	8001924 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b06      	cmp	r3, #6
 8001910:	d010      	beq.n	8001934 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 0201 	orr.w	r2, r2, #1
 8001920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001922:	e007      	b.n	8001934 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40010000 	.word	0x40010000
 8001948:	40000400 	.word	0x40000400
 800194c:	40000800 	.word	0x40000800
 8001950:	40000c00 	.word	0x40000c00
 8001954:	40014000 	.word	0x40014000

08001958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d020      	beq.n	80019bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d01b      	beq.n	80019bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f06f 0202 	mvn.w	r2, #2
 800198c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f8d2 	bl	8001b4c <HAL_TIM_IC_CaptureCallback>
 80019a8:	e005      	b.n	80019b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f8c4 	bl	8001b38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f8d5 	bl	8001b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d020      	beq.n	8001a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01b      	beq.n	8001a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f06f 0204 	mvn.w	r2, #4
 80019d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2202      	movs	r2, #2
 80019de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f8ac 	bl	8001b4c <HAL_TIM_IC_CaptureCallback>
 80019f4:	e005      	b.n	8001a02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f89e 	bl	8001b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f8af 	bl	8001b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d020      	beq.n	8001a54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d01b      	beq.n	8001a54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f06f 0208 	mvn.w	r2, #8
 8001a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2204      	movs	r2, #4
 8001a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f886 	bl	8001b4c <HAL_TIM_IC_CaptureCallback>
 8001a40:	e005      	b.n	8001a4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f878 	bl	8001b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f889 	bl	8001b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d020      	beq.n	8001aa0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d01b      	beq.n	8001aa0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f06f 0210 	mvn.w	r2, #16
 8001a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2208      	movs	r2, #8
 8001a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f860 	bl	8001b4c <HAL_TIM_IC_CaptureCallback>
 8001a8c:	e005      	b.n	8001a9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f852 	bl	8001b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f863 	bl	8001b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00c      	beq.n	8001ac4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d007      	beq.n	8001ac4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f06f 0201 	mvn.w	r2, #1
 8001abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7fe fdf8 	bl	80006b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00c      	beq.n	8001ae8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d007      	beq.n	8001ae8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f8e6 	bl	8001cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00c      	beq.n	8001b0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d007      	beq.n	8001b0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f834 	bl	8001b74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f003 0320 	and.w	r3, r3, #32
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00c      	beq.n	8001b30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d007      	beq.n	8001b30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f06f 0220 	mvn.w	r2, #32
 8001b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f8b8 	bl	8001ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a3a      	ldr	r2, [pc, #232]	@ (8001c84 <TIM_Base_SetConfig+0xfc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d00f      	beq.n	8001bc0 <TIM_Base_SetConfig+0x38>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ba6:	d00b      	beq.n	8001bc0 <TIM_Base_SetConfig+0x38>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a37      	ldr	r2, [pc, #220]	@ (8001c88 <TIM_Base_SetConfig+0x100>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d007      	beq.n	8001bc0 <TIM_Base_SetConfig+0x38>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a36      	ldr	r2, [pc, #216]	@ (8001c8c <TIM_Base_SetConfig+0x104>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d003      	beq.n	8001bc0 <TIM_Base_SetConfig+0x38>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a35      	ldr	r2, [pc, #212]	@ (8001c90 <TIM_Base_SetConfig+0x108>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d108      	bne.n	8001bd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8001c84 <TIM_Base_SetConfig+0xfc>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d01b      	beq.n	8001c12 <TIM_Base_SetConfig+0x8a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001be0:	d017      	beq.n	8001c12 <TIM_Base_SetConfig+0x8a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a28      	ldr	r2, [pc, #160]	@ (8001c88 <TIM_Base_SetConfig+0x100>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d013      	beq.n	8001c12 <TIM_Base_SetConfig+0x8a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a27      	ldr	r2, [pc, #156]	@ (8001c8c <TIM_Base_SetConfig+0x104>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00f      	beq.n	8001c12 <TIM_Base_SetConfig+0x8a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a26      	ldr	r2, [pc, #152]	@ (8001c90 <TIM_Base_SetConfig+0x108>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00b      	beq.n	8001c12 <TIM_Base_SetConfig+0x8a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a25      	ldr	r2, [pc, #148]	@ (8001c94 <TIM_Base_SetConfig+0x10c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d007      	beq.n	8001c12 <TIM_Base_SetConfig+0x8a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a24      	ldr	r2, [pc, #144]	@ (8001c98 <TIM_Base_SetConfig+0x110>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d003      	beq.n	8001c12 <TIM_Base_SetConfig+0x8a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a23      	ldr	r2, [pc, #140]	@ (8001c9c <TIM_Base_SetConfig+0x114>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d108      	bne.n	8001c24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001c84 <TIM_Base_SetConfig+0xfc>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d103      	bne.n	8001c58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d105      	bne.n	8001c76 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	f023 0201 	bic.w	r2, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	611a      	str	r2, [r3, #16]
  }
}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40010000 	.word	0x40010000
 8001c88:	40000400 	.word	0x40000400
 8001c8c:	40000800 	.word	0x40000800
 8001c90:	40000c00 	.word	0x40000c00
 8001c94:	40014000 	.word	0x40014000
 8001c98:	40014400 	.word	0x40014400
 8001c9c:	40014800 	.word	0x40014800

08001ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	@ 0x28
 8001ccc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cd2:	4b7e      	ldr	r3, [pc, #504]	@ (8001ecc <xTaskIncrementTick+0x204>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 80ed 	bne.w	8001eb6 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001cdc:	4b7c      	ldr	r3, [pc, #496]	@ (8001ed0 <xTaskIncrementTick+0x208>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001ce4:	4a7a      	ldr	r2, [pc, #488]	@ (8001ed0 <xTaskIncrementTick+0x208>)
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d121      	bne.n	8001d34 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001cf0:	4b78      	ldr	r3, [pc, #480]	@ (8001ed4 <xTaskIncrementTick+0x20c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00b      	beq.n	8001d12 <xTaskIncrementTick+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cfe:	f383 8811 	msr	BASEPRI, r3
 8001d02:	f3bf 8f6f 	isb	sy
 8001d06:	f3bf 8f4f 	dsb	sy
 8001d0a:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	e7fd      	b.n	8001d0e <xTaskIncrementTick+0x46>
 8001d12:	4b70      	ldr	r3, [pc, #448]	@ (8001ed4 <xTaskIncrementTick+0x20c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	4b6f      	ldr	r3, [pc, #444]	@ (8001ed8 <xTaskIncrementTick+0x210>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a6d      	ldr	r2, [pc, #436]	@ (8001ed4 <xTaskIncrementTick+0x20c>)
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4a6d      	ldr	r2, [pc, #436]	@ (8001ed8 <xTaskIncrementTick+0x210>)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b6d      	ldr	r3, [pc, #436]	@ (8001edc <xTaskIncrementTick+0x214>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	4a6b      	ldr	r2, [pc, #428]	@ (8001edc <xTaskIncrementTick+0x214>)
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	f000 f93e 	bl	8001fb0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001d34:	4b6a      	ldr	r3, [pc, #424]	@ (8001ee0 <xTaskIncrementTick+0x218>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6a3a      	ldr	r2, [r7, #32]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	f0c0 80a6 	bcc.w	8001e8c <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d40:	4b64      	ldr	r3, [pc, #400]	@ (8001ed4 <xTaskIncrementTick+0x20c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d104      	bne.n	8001d54 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d4a:	4b65      	ldr	r3, [pc, #404]	@ (8001ee0 <xTaskIncrementTick+0x218>)
 8001d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d50:	601a      	str	r2, [r3, #0]
                    break;
 8001d52:	e09b      	b.n	8001e8c <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d54:	4b5f      	ldr	r3, [pc, #380]	@ (8001ed4 <xTaskIncrementTick+0x20c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001d64:	6a3a      	ldr	r2, [r7, #32]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d203      	bcs.n	8001d74 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001d6c:	4a5c      	ldr	r2, [pc, #368]	@ (8001ee0 <xTaskIncrementTick+0x218>)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001d72:	e08b      	b.n	8001e8c <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	68d2      	ldr	r2, [r2, #12]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	6892      	ldr	r2, [r2, #8]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	3304      	adds	r3, #4
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d103      	bne.n	8001da2 <xTaskIncrementTick+0xda>
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	2200      	movs	r2, #0
 8001da6:	615a      	str	r2, [r3, #20]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	1e5a      	subs	r2, r3, #1
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d01e      	beq.n	8001df8 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	6a12      	ldr	r2, [r2, #32]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	69d2      	ldr	r2, [r2, #28]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	3318      	adds	r3, #24
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d103      	bne.n	8001de8 <xTaskIncrementTick+0x120>
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	6a1a      	ldr	r2, [r3, #32]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	2200      	movs	r2, #0
 8001dec:	629a      	str	r2, [r3, #40]	@ 0x28
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	1e5a      	subs	r2, r3, #1
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	4b38      	ldr	r3, [pc, #224]	@ (8001ee4 <xTaskIncrementTick+0x21c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	4a37      	ldr	r2, [pc, #220]	@ (8001ee4 <xTaskIncrementTick+0x21c>)
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e0e:	4936      	ldr	r1, [pc, #216]	@ (8001ee8 <xTaskIncrementTick+0x220>)
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	3204      	adds	r2, #4
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	1d1a      	adds	r2, r3, #4
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4a26      	ldr	r2, [pc, #152]	@ (8001ee8 <xTaskIncrementTick+0x220>)
 8001e4e:	441a      	add	r2, r3
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	615a      	str	r2, [r3, #20]
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e58:	4923      	ldr	r1, [pc, #140]	@ (8001ee8 <xTaskIncrementTick+0x220>)
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	1c59      	adds	r1, r3, #1
 8001e68:	481f      	ldr	r0, [pc, #124]	@ (8001ee8 <xTaskIncrementTick+0x220>)
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4403      	add	r3, r0
 8001e74:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001eec <xTaskIncrementTick+0x224>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e80:	429a      	cmp	r2, r3
 8001e82:	f67f af5d 	bls.w	8001d40 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8001e86:	2301      	movs	r3, #1
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e8a:	e759      	b.n	8001d40 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001e8c:	4b17      	ldr	r3, [pc, #92]	@ (8001eec <xTaskIncrementTick+0x224>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e92:	4915      	ldr	r1, [pc, #84]	@ (8001ee8 <xTaskIncrementTick+0x220>)
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d901      	bls.n	8001ea8 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001ea8:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <xTaskIncrementTick+0x228>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb4:	e004      	b.n	8001ec0 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef4 <xTaskIncrementTick+0x22c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef4 <xTaskIncrementTick+0x22c>)
 8001ebe:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3728      	adds	r7, #40	@ 0x28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200000fc 	.word	0x200000fc
 8001ed0:	200000e4 	.word	0x200000e4
 8001ed4:	200000dc 	.word	0x200000dc
 8001ed8:	200000e0 	.word	0x200000e0
 8001edc:	200000f4 	.word	0x200000f4
 8001ee0:	200000f8 	.word	0x200000f8
 8001ee4:	200000e8 	.word	0x200000e8
 8001ee8:	20000078 	.word	0x20000078
 8001eec:	20000074 	.word	0x20000074
 8001ef0:	200000f0 	.word	0x200000f0
 8001ef4:	200000ec 	.word	0x200000ec

08001ef8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001efe:	4b27      	ldr	r3, [pc, #156]	@ (8001f9c <vTaskSwitchContext+0xa4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001f06:	4b26      	ldr	r3, [pc, #152]	@ (8001fa0 <vTaskSwitchContext+0xa8>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001f0c:	e040      	b.n	8001f90 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8001f0e:	4b24      	ldr	r3, [pc, #144]	@ (8001fa0 <vTaskSwitchContext+0xa8>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f14:	4b23      	ldr	r3, [pc, #140]	@ (8001fa4 <vTaskSwitchContext+0xac>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001f22:	7afb      	ldrb	r3, [r7, #11]
 8001f24:	f1c3 031f 	rsb	r3, r3, #31
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	491f      	ldr	r1, [pc, #124]	@ (8001fa8 <vTaskSwitchContext+0xb0>)
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10b      	bne.n	8001f56 <vTaskSwitchContext+0x5e>
        __asm volatile
 8001f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f42:	f383 8811 	msr	BASEPRI, r3
 8001f46:	f3bf 8f6f 	isb	sy
 8001f4a:	f3bf 8f4f 	dsb	sy
 8001f4e:	607b      	str	r3, [r7, #4]
    }
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	e7fd      	b.n	8001f52 <vTaskSwitchContext+0x5a>
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4a11      	ldr	r2, [pc, #68]	@ (8001fa8 <vTaskSwitchContext+0xb0>)
 8001f62:	4413      	add	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	3308      	adds	r3, #8
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d104      	bne.n	8001f86 <vTaskSwitchContext+0x8e>
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4a07      	ldr	r2, [pc, #28]	@ (8001fac <vTaskSwitchContext+0xb4>)
 8001f8e:	6013      	str	r3, [r2, #0]
}
 8001f90:	bf00      	nop
 8001f92:	371c      	adds	r7, #28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	200000fc 	.word	0x200000fc
 8001fa0:	200000f0 	.word	0x200000f0
 8001fa4:	200000e8 	.word	0x200000e8
 8001fa8:	20000078 	.word	0x20000078
 8001fac:	20000074 	.word	0x20000074

08001fb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <prvResetNextTaskUnblockTime+0x30>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d104      	bne.n	8001fc8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001fbe:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <prvResetNextTaskUnblockTime+0x34>)
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001fc6:	e005      	b.n	8001fd4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001fc8:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <prvResetNextTaskUnblockTime+0x30>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <prvResetNextTaskUnblockTime+0x34>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	200000dc 	.word	0x200000dc
 8001fe4:	200000f8 	.word	0x200000f8
	...

08001ff0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001ff0:	4b07      	ldr	r3, [pc, #28]	@ (8002010 <pxCurrentTCBConst2>)
 8001ff2:	6819      	ldr	r1, [r3, #0]
 8001ff4:	6808      	ldr	r0, [r1, #0]
 8001ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ffa:	f380 8809 	msr	PSP, r0
 8001ffe:	f3bf 8f6f 	isb	sy
 8002002:	f04f 0000 	mov.w	r0, #0
 8002006:	f380 8811 	msr	BASEPRI, r0
 800200a:	4770      	bx	lr
 800200c:	f3af 8000 	nop.w

08002010 <pxCurrentTCBConst2>:
 8002010:	20000074 	.word	0x20000074
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
	...

08002020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002020:	f3ef 8009 	mrs	r0, PSP
 8002024:	f3bf 8f6f 	isb	sy
 8002028:	4b15      	ldr	r3, [pc, #84]	@ (8002080 <pxCurrentTCBConst>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	f01e 0f10 	tst.w	lr, #16
 8002030:	bf08      	it	eq
 8002032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800203a:	6010      	str	r0, [r2, #0]
 800203c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002040:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002044:	f380 8811 	msr	BASEPRI, r0
 8002048:	f3bf 8f4f 	dsb	sy
 800204c:	f3bf 8f6f 	isb	sy
 8002050:	f7ff ff52 	bl	8001ef8 <vTaskSwitchContext>
 8002054:	f04f 0000 	mov.w	r0, #0
 8002058:	f380 8811 	msr	BASEPRI, r0
 800205c:	bc09      	pop	{r0, r3}
 800205e:	6819      	ldr	r1, [r3, #0]
 8002060:	6808      	ldr	r0, [r1, #0]
 8002062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002066:	f01e 0f10 	tst.w	lr, #16
 800206a:	bf08      	it	eq
 800206c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002070:	f380 8809 	msr	PSP, r0
 8002074:	f3bf 8f6f 	isb	sy
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	f3af 8000 	nop.w

08002080 <pxCurrentTCBConst>:
 8002080:	20000074 	.word	0x20000074
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop

08002088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
        __asm volatile
 800208e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002092:	f383 8811 	msr	BASEPRI, r3
 8002096:	f3bf 8f6f 	isb	sy
 800209a:	f3bf 8f4f 	dsb	sy
 800209e:	607b      	str	r3, [r7, #4]
    }
 80020a0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80020a2:	f7ff fe11 	bl	8001cc8 <xTaskIncrementTick>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80020ac:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <SysTick_Handler+0x40>)
 80020ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	2300      	movs	r3, #0
 80020b6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80020be:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	e000ed04 	.word	0xe000ed04

080020cc <memset>:
 80020cc:	4402      	add	r2, r0
 80020ce:	4603      	mov	r3, r0
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d100      	bne.n	80020d6 <memset+0xa>
 80020d4:	4770      	bx	lr
 80020d6:	f803 1b01 	strb.w	r1, [r3], #1
 80020da:	e7f9      	b.n	80020d0 <memset+0x4>

080020dc <__libc_init_array>:
 80020dc:	b570      	push	{r4, r5, r6, lr}
 80020de:	4d0d      	ldr	r5, [pc, #52]	@ (8002114 <__libc_init_array+0x38>)
 80020e0:	4c0d      	ldr	r4, [pc, #52]	@ (8002118 <__libc_init_array+0x3c>)
 80020e2:	1b64      	subs	r4, r4, r5
 80020e4:	10a4      	asrs	r4, r4, #2
 80020e6:	2600      	movs	r6, #0
 80020e8:	42a6      	cmp	r6, r4
 80020ea:	d109      	bne.n	8002100 <__libc_init_array+0x24>
 80020ec:	4d0b      	ldr	r5, [pc, #44]	@ (800211c <__libc_init_array+0x40>)
 80020ee:	4c0c      	ldr	r4, [pc, #48]	@ (8002120 <__libc_init_array+0x44>)
 80020f0:	f000 f818 	bl	8002124 <_init>
 80020f4:	1b64      	subs	r4, r4, r5
 80020f6:	10a4      	asrs	r4, r4, #2
 80020f8:	2600      	movs	r6, #0
 80020fa:	42a6      	cmp	r6, r4
 80020fc:	d105      	bne.n	800210a <__libc_init_array+0x2e>
 80020fe:	bd70      	pop	{r4, r5, r6, pc}
 8002100:	f855 3b04 	ldr.w	r3, [r5], #4
 8002104:	4798      	blx	r3
 8002106:	3601      	adds	r6, #1
 8002108:	e7ee      	b.n	80020e8 <__libc_init_array+0xc>
 800210a:	f855 3b04 	ldr.w	r3, [r5], #4
 800210e:	4798      	blx	r3
 8002110:	3601      	adds	r6, #1
 8002112:	e7f2      	b.n	80020fa <__libc_init_array+0x1e>
 8002114:	0800215c 	.word	0x0800215c
 8002118:	0800215c 	.word	0x0800215c
 800211c:	0800215c 	.word	0x0800215c
 8002120:	08002160 	.word	0x08002160

08002124 <_init>:
 8002124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002126:	bf00      	nop
 8002128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212a:	bc08      	pop	{r3}
 800212c:	469e      	mov	lr, r3
 800212e:	4770      	bx	lr

08002130 <_fini>:
 8002130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002132:	bf00      	nop
 8002134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002136:	bc08      	pop	{r3}
 8002138:	469e      	mov	lr, r3
 800213a:	4770      	bx	lr
